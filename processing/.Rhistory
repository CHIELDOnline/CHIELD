n = 300
x = as.factor(sample(1:4,n,replace = T))
y = as.factor(sample(1:4,n,replace = T))
r = as.factor(rep(1:2,n/2))
data = data.frame(x=x,y=y,r=r)
REEMtree(x~y,data=data,random=r)
x
d = read.csv("/Library/WebServer/Documents/LED/offline/data/db/full.csv")
head(d)
??args
d = read.delim("~/Documents/MPI/refLexIron/LexDistances/Lesage/IronLingPy/IronWords2/Data/correctedCognates/Iron_cognates_Jakob_manualedit2_aligned_withLatitudes.qlc", stringsAsFactors = F)
head(d)
length(unique(d$DOCULECT))
dim(d)
d = read.delim("~/Documents/MPI/refLexIron/LexDistances/Lesage/IronLingPy/IronWords2/Data/correctedCognates/Iron_cognates_Jakob_manualedit2_aligned_withLatitudes.qlc", stringsAsFactors = F)
tapply(d$DOCULECT,d$LEXSTATID, function(X){length(unique(X))})
table(tapply(d$DOCULECT,d$LEXSTATID, function(X){length(unique(X))}))
sum(table(tapply(d$DOCULECT,d$LEXSTATID, function(X){length(unique(X))})))
184-362
184/362
??confint
library(sjPlot)
?sjp.glmer()
library(party)
?cforest
library(party)
d = data.frame(
v = as.factor(sample(1:10,1000,replace = T)),
language.family = as.factor(sample(1:4,1000,replace = T)),
region = as.factor(sample(1:6, 1000, replace = T))
)
library(party)
d = data.frame(
v = as.factor(sample(1:10,1000,replace = T)),
language.family = as.factor(sample(1:4,1000,replace = T)),
region = as.factor(sample(1:6, 1000, replace = T))
)
ctree(v~language.family+region,
data = d)
library(party)
d = data.frame(
v = as.factor(sample(1:10,1000,replace = T)),
language.family = as.factor(sample(1:4,1000,replace = T)),
region = as.factor(sample(1:6, 1000, replace = T))
)
ct = ctree(v~language.family+region,
data = d)
plot(ct)
library(party)
d = data.frame(
v = as.factor(sample(1:10,1000,replace = T)),
language.family = as.factor(sample(1:4,1000,replace = T)),
region = as.factor(sample(1:6, 1000, replace = T))
)
d[d$language.family==1,]$v = 1
d[d$region==1,]$v = 2
d[d$language.family==2 & d$region==2,]$v = 3
d$v = as.factor(d$v)
ct = ctree(v~language.family+region,
data = d)
plot(ct)
sample(1:10,prob = c(1,rep(0.2,9)))
sample(1:10,prob = c(1,rep(0.2,9)))
sample(1:10,prob = c(1,rep(0.2,9)))
sample(1:10,prob = c(1,rep(0.2,9)))
sample(1:10,prob = c(1,rep(0.2,9)))
sample(1:10,prob = c(1,rep(0.2,9)))
sample(1:10,prob = c(1,rep(0.2,9)))
sample(1:10,prob = c(1,rep(0.2,9)))
sample(1:10,prob = c(1,rep(0.2,9)))
sample(1:10,prob = c(1,rep(0.2,9)))
sample(1:10,prob = c(1,rep(0.2,9)))
sample(1:10,prob = c(1,rep(0.2,9)))
library(party)
d = data.frame(
v = as.factor(sample(1:10,1000,replace = T)),
language.family = as.factor(sample(1:4,1000,replace = T)),
region = as.factor(sample(1:6, 1000, replace = T))
)
d[d$language.family==1,]$v = sample(1:10, sum(d$language.family==1), replace = T,prob = c(1,rep(0.2,9)))
d[d$region==1,]$v = sample(1:10, sum(d$language.family==1), replace = T,prob = c(0.2,1,rep(0.2,8)))
d[d$language.family==2 & d$region==2,]$v = sample(1:10, sum(d$language.family==1), replace = T,prob = c(0.2,0.2,1,rep(0.2,7)))
library(party)
d = data.frame(
v = as.factor(sample(1:10,1000,replace = T)),
language.family = as.factor(sample(1:4,1000,replace = T)),
region = as.factor(sample(1:6, 1000, replace = T))
)
d[d$language.family==1,]$v = sample(1:10, sum(d$language.family==1), replace = T,prob = c(1,rep(0.2,9)))
d[d$region==1,]$v = sample(1:10, sum(d$region==1), replace = T,prob = c(0.2,1,rep(0.2,8)))
d[d$language.family==2 & d$region==2,]$v = sample(1:10, sum(d$language.family==2 & d$region==2), replace = T,prob = c(0.2,0.2,1,rep(0.2,7)))
d$v = as.factor(d$v)
ct = ctree(v~language.family+region,
data = d)
plot(ct)
library(party)
d = data.frame(
v = as.factor(sample(1:10,1000,replace = T)),
language.family = as.factor(sample(1:4,1000,replace = T)),
region = as.factor(sample(1:6, 1000, replace = T))
)
d[d$language.family==1,]$v = sample(1:10, sum(d$language.family==1), replace = T,prob = c(1,rep(0.2,9)))
d[d$region==1,]$v = sample(1:10, sum(d$region==1), replace = T,prob = c(0.2,1,rep(0.2,8)))
d[d$language.family==2 & d$region==2,]$v = sample(1:10, sum(d$language.family==2 & d$region==2), replace = T,prob = c(0.2,0.2,1,rep(0.2,7)))
d$v = as.factor(d$v)
ct = ctree(v~language.family+region,
data = d)
plot(ct)
library(party)
d = data.frame(
v = as.factor(sample(1:10,1000,replace = T)),
language.family = as.factor(sample(1:4,1000,replace = T)),
region = as.factor(sample(1:6, 1000, replace = T))
)
d[d$language.family==1,]$v = sample(1:10, sum(d$language.family==1), replace = T,prob = c(1,rep(0.2,9)))
d[d$region==1,]$v = sample(1:10, sum(d$region==1), replace = T,prob = c(0.2,1,rep(0.2,8)))
d[d$language.family==2 & d$region==2,]$v = sample(1:10, sum(d$language.family==2 & d$region==2), replace = T,prob = c(0.2,0.2,1,rep(0.2,7)))
d$v = as.factor(d$v)
ct = ctree(v~language.family+region,
data = d)
plot(ct)
predict(ct)
summary(ct)
deviance(ct)
fitted(ct)
predict(ct, type = "prob")
pred <- predict(ct, type = "prob")
pred[cbind(1:nrow(pred), as.numeric(obs))]
as.data.frame(pred)
dim(as.data.frame(pred))
dim(t(as.data.frame(pred)))
t(as.data.frame(pred))
as.data.frame(t(as.data.frame(pred)))
?as.data.frame(t(as.data.frame(pred)))
pred = as.data.frame(t(as.data.frame(pred)))
cbind(1:nrow(pred), as.numeric(obs))
1:nrow(pred)
as.numeric(obs)
ct@responses
ct@responses@
cf = cforest(v~language.family+region,
data = d)
plot(cf)
cf
summary(cf)
varimp(cf)
pred = predict(cf,type="prob")
pred = predict(ct, type="prob")
pred = as.data.frame(t(as.data.frame(pred)))
pred
rownames(pred) = 1:nrow(pred)
head(pred)
sapply(1:nrow(d), function(i){
pred[i,as.numeric(d$v[i])]
})
pred = predict(cf, type="prob")
pred = as.data.frame(t(as.data.frame(pred)))
acc = sapply(1:nrow(d), function(i){
pred[i,as.numeric(d$v[i])]
})
mean(acc)^2
acc
pred = predict(ct, type="prob")
i = 1
pred[i]
pred[[i]]
pred[[i]][d$v[i]]
pred = predict(ct, type="prob")
acc = sapply(1:nrow(d), function(i){
pred[[i]][d$v[i]]
})
mean(acc)
mean(acc)^2
pred = predict(cf, type="prob")
acc = sapply(1:nrow(d), function(i){
pred[[i]][d$v[i]]
})
acc
mean(acc)^2
?ctree
form = paste("v", "~language.family+region")
ct = ctree(form,
data = d)
paste("v", "~language.family+region")
form = paste("v", "~language.family+region")
ct = ctree(formula(form),
data = d)
plot(ct)
# Choose the variable
d$v = as.factor(d$v)
form = paste("v", "~language.family+region")
ct = ctree(formula(form),
data = d)
pred = predict(ct, type="prob")
acc = sapply(1:nrow(d), function(i){
pred[[i]][d$v[i]]
})
mean(acc)^2
rm(list=ls())
library(party)
######
# make up some data
d = data.frame(
v = as.factor(sample(1:10,1000,replace = T)),
language = as.factor(sample(1:4,1000,replace = T)),
region = as.factor(sample(1:6, 1000, replace = T))
)
d[d$language==1,]$v = sample(1:10, sum(d$language==1), replace = T,prob = c(1,rep(0.2,9)))
d[d$region==1,]$v = sample(1:10, sum(d$region==1), replace = T,prob = c(0.2,1,rep(0.2,8)))
d[d$language==2 & d$region==2,]$v = sample(1:10, sum(d$language==2 & d$region==2), replace = T,prob = c(0.2,0.2,1,rep(0.2,7)))
d$v = as.factor(d$v)
########
# Choose the variable to study
function getRSq_tree(d,var, method=ctree){
# Make a tree
form = paste(var, "~language+region")
ct = method(formula(form),
data = d)
# Get the predictions and work out how close the model is
pred = predict(ct, type="prob")
acc = sapply(1:nrow(d), function(i){
pred[[i]][d$v[i]]
})
r.squared = mean(acc)^2
return(r.squared)
}
getRSq_tree(d,"v", ctree)
# Forest:
getRSq_tree(d,"v", cforest)
library(party)
######
# make up some data
d = data.frame(
v = as.factor(sample(1:10,1000,replace = T)),
language = as.factor(sample(1:4,1000,replace = T)),
region = as.factor(sample(1:6, 1000, replace = T))
)
d[d$language==1,]$v = sample(1:10, sum(d$language==1), replace = T,prob = c(1,rep(0.2,9)))
d[d$region==1,]$v = sample(1:10, sum(d$region==1), replace = T,prob = c(0.2,1,rep(0.2,8)))
d[d$language==2 & d$region==2,]$v = sample(1:10, sum(d$language==2 & d$region==2), replace = T,prob = c(0.2,0.2,1,rep(0.2,7)))
d$v = as.factor(d$v)
########
# Choose the variable to study
getRSq_tree = function(d,var, method=ctree){
# Make a tree
form = paste(var, "~language+region")
ct = method(formula(form),
data = d)
# Get the predictions and work out how close the model is
pred = predict(ct, type="prob")
acc = sapply(1:nrow(d), function(i){
pred[[i]][d$v[i]]
})
r.squared = mean(acc)^2
return(r.squared)
}
getRSq_tree(d,"v", ctree)
# Forest:
getRSq_tree(d,"v", cforest)
n = 20
x = runif(0,1,n)
y = jitter(x,amount=2)
z = jitter(x+y,amount=2)
m = lm(z ~ x+y)
x
?runif
n = 20
x = runif(n,0,1)
y = jitter(x,amount=2)
z = jitter(x+y,amount=2)
m = lm(z ~ x+y)
m
?heat.colors
z.col = heat.colors(10)[as.numeric(z,breaks=11)]
as.numeric(z,breaks=11)
as.factor(z,breaks=11)
as.numeric(cut(z,breaks=11))
as.numeric(cut(z,breaks=10))
heat.colors(10)[as.numeric(cut(z,breaks=10))]
n = 20
x = runif(n,0,1)
y = jitter(x,amount=2)
z = jitter(x+y,amount=2)
z.col = heat.colors(10)[as.numeric(cut(z,breaks=10))]
m = lm(z ~ x+y)
plot(x,y, col=z.col)
plot(x,y, col=z.col, pch=16)
summary(m)
n = 20
x = runif(n,0,1)
y = jitter(x,amount=2)
z = jitter(x+y,amount=2)
z.col = heat.colors(10)[as.numeric(cut(z,breaks=10))]
m = lm(z ~ x+y)
summary(m)
plot(x,y, col=z.col, pch=16)
n = 20
x = runif(n,0,1)
y = jitter(x,amount=2)
z = jitter(x+y,amount=2)
z.col = heat.colors(10)[as.numeric(cut(z,breaks=10))]
m = lm(z ~ x+y)
summary(m)
n = 20
x = runif(n,0,1)
y = jitter(x,amount=2)
z = jitter(x*y,amount=2)
z.col = heat.colors(10)[as.numeric(cut(z,breaks=10))]
m = lm(z ~ x+y)
summary(m)
plot(x,y, col=z.col, pch=16)
n = 20
x = runif(n,0,1)
y = jitter(x,amount=2)
z = jitter(x*y,amount=1)
z.col = heat.colors(10)[as.numeric(cut(z,breaks=10))]
m = lm(z ~ x+y)
summary(m)
plot(x,y, col=z.col, pch=16)
n = 20
x = runif(n,0,1)
y = jitter(x,amount=1)
z = jitter(x*y,amount=1)
z.col = heat.colors(10)[as.numeric(cut(z,breaks=10))]
m = lm(z ~ x+y)
summary(m)
plot(x,y, col=z.col, pch=16)
x
library(beepr)
beepr::beep(8)
# Take the CHILED database in a directory tree format and build an SQL database
suppressWarnings(suppressMessages(library(digest)))
suppressWarnings(suppressMessages(library(stringr)))
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(dbplyr)))
suppressWarnings(suppressMessages(library(RSQLite)))
suppressWarnings(suppressMessages(library(bibtex)))
suppressWarnings(suppressMessages(library(readr)))
src_sqlite
?src_sqlite
text = "{dsandkasdas}"
text = gsub("[{}]","",text)
text
# Take the CHILED database in a directory tree format and build an SQL database
suppressWarnings(suppressMessages(library(digest)))
suppressWarnings(suppressMessages(library(stringr)))
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(dbplyr)))
suppressWarnings(suppressMessages(library(RSQLite)))
suppressWarnings(suppressMessages(library(bibtex)))
suppressWarnings(suppressMessages(library(readr)))
try(setwd("~/Documents/Bristol/CHIELD/CHIELD_Online/processing/"))
source("detexify.R")
treeBaseFolder = "../data/tree"
default_contributor = "seannyD"
default_contributor_realname = "Sean Roberts"
causal_links_columns =
c('bibref', 'Var1','Relation','Var2',
'Cor',"Process",
"Topic", "Stage", "Type",
"Subtype","Confirmed","Notes")
# helper functions
hex_to_int = function(h) {
xx = strsplit(tolower(h), "")[[1L]]
pos = match(xx, c(0L:9L, letters[1L:6L]))
sum((pos - 1L) * 16^(rev(seq_along(xx) - 1)))
}
str_to_int = function(s){
hex_to_int(digest(s,algo='xxhash32'))
}
checkCharacters = function(X){
sapply(X,function(Z){
x = try(nchar(Z))
if(grepl("invalid multibyte string",x)){
print("WARNING: invalid multibyte string")
print(x)
print(Z)
}
})
return("Finished Checking")
}
makePks = function(base){
# unique keys based on hash numbers.
# Duplicate strings are given different keys
# Old method:
n = sapply(1:length(base),function(i){sum(base[i:length(base)]==base[i])})
as.character(sapply(paste0(n,base),str_to_int))
# For now, just return incrementing values
#1:length(base)
}
getShortCitation = function(b){
if(is.null(b$author)){
return("")
}
citationAndSep = " & "
citationEnd = ""
bAuthors = b$author
if(length(bAuthors)>4){
bAuthors = b$author[1:4]
citationAndSep = ", "
citationEnd = " et al."
}
bAuthors = sapply(b$author,function(X){X$family})
bAuthors = detexify(bAuthors)
if(length(bAuthors)==1){
authorList = bAuthors[1]
} else{
authorList = paste0(
paste(bAuthors[1:(length(bAuthors)-1)],collapse=", "),
citationAndSep,
tail(bAuthors,1),
citationEnd
)
}
bCitation = paste0(
authorList,
" (",b$year,")")
return(bCitation)
}
getVersion = function(){
gitRevision = system("git rev-parse HEAD",intern = T)
CHIELD.version = readLines("../version.txt")
return(data.frame(version=CHIELD.version,
gitRevision = gitRevision))
}
#####
links = data.frame()
bib = data.frame(pk = NA,author = NA,
year = NA,title = NA,record = NA,
citation=NA, stringsAsFactors = F)
# Super bibtex file with all documents
# (as vector of strings so we can order it later)
bigBibtexFile = c()
contributors = data.frame(
username = NA,
realname = NA,
date = NA,
bibref = NA,
stringsAsFactors = F
)
for(f in list.dirs(treeBaseFolder)){
files = list.files(f)
if(sum(grepl("*.csv",files)>0)){
linkFile = files[grepl("*.csv",files)][1]
bibFile = files[grepl("*.bib",files)][1]
l = read.csv(paste0(f,"/",linkFile), stringsAsFactors = F, encoding = 'utf-8',fileEncoding = 'utf-8')
# Remove rows without basic data
l = l[complete.cases(l[,c("Var1","Var2")]),]
l$Var1[l$Var1==""] = NA
l$Var2[l$Var2==""] = NA
l = l[complete.cases(l[,c("Var1","Var2")]),]
# Check if there is actually any data left
if(nrow(l)>0){
for(colx in causal_links_columns){
if(!colx %in% names(l)){
l[,colx] = ""
}
}
l = l[,causal_links_columns]
# Add links to list of links
links = rbind(links,l)
#b = readLines(paste0(f,"/",bibFile), warn = F)
b = read.bib(paste0(f,"/",bibFile))
checkCharacters(readLines(paste0(f,"/",bibFile),warn = F))
# Add to big list
bigBibtexFile = c(bigBibtexFile,paste(toBibtex(b),collapse = "\n"))
# Extract info
bKey = b$key
bAuthor = paste(detexify(b$author),collapse='; ')
bYear = b$year
bTitle = detexify(b$title)
bRecord = paste(as.character(toBibtex(b)),collapse="\n")
#bCitation = format(b, style = "html")
# remove link text
#bCitation = gsub(">[^<]+</a>",">link</a>",bCitation)
# Citation is now e.g. Ackley & Littman (1994)
bCitation = getShortCitation(b)
bib = rbind(bib,
c(bKey, bAuthor, bYear, bTitle,
bRecord, bCitation))
# Contributor
newContributors= data.frame(
username=default_contributor,
realname=default_contributor_realname,
date = "",
bibref=bKey
)
contributor.file = paste0(f,"/contributors.txt")
if(file.exists(contributor.file)){
suppressWarnings(cx <- read.delim(contributor.file,sep="\t", header=F, stringsAsFactors = F))
names(cx)[1:3] = c("username",'realname','date')
cx$bibref = bKey
newContributors = cx
}
contributors = rbind(contributors,newContributors[,c("username","realname","date","bibref")])
}
}
}
bib = bib[2:nrow(bib),]
bib = bib[!is.na(bib$pk),]
bib = bib[bib$pk!="",]
rownames(bib) = bib$pk
contributors = contributors[!is.na(contributors$username),]
contributors
head(contributors)
dim(contributors)
contributors[!duplicated(contributors[,c("username",'bibref')]),]
contributors = contributors[!duplicated(contributors[,c("username",'bibref')]),]
dim(bibref)
dim(contributors)
names(contributors)
contributors[contributors$realname=="Sean Lee",]
