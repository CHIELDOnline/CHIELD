#b = readLines(paste0(f,"/",bibFile), warn = F)
b = read.bib(paste0(f,"/",bibFile))
bKey = b$key
bAuthor = paste(b$author,collapse='; ')
bYear = b$year
bTitle = b$title
bRecord = paste(as.character(toBibtex(b)),collapse="\n")
#bCitation = format(b, style = "html")
# remove link text
#bCitation = gsub(">[^<]+</a>",">link</a>",bCitation)
# Citation is now e.g. Ackley & Littman (1994)
bCitation = getShortCitation(b)
bib = rbind(bib,
c(bKey, bAuthor, bYear, bTitle,
bRecord, bCitation))
}
}
bib = bib[2:nrow(bib),]
bib = bib[!is.na(bib$pk),]
bib = bib[bib$pk!="",]
rownames(bib) = bib$pk
b
b$year
library(digest)
library(stringr)
library(dplyr)
library(dbplyr)
library(RSQLite)
library(bibtex)
library(readr)
try(setwd("~/Documents/Bristol/CHIELD/CHIELD_Online/processing/"))
treeBaseFolder = "../data/tree"
causal_links_columns =
c('bibref', 'Var1','Relation','Var2',
'Cor',"Process",
"Topic", "Stage", "Type",
"Subtype","Confirmed","Notes")
# helper functions
hex_to_int = function(h) {
xx = strsplit(tolower(h), "")[[1L]]
pos = match(xx, c(0L:9L, letters[1L:6L]))
sum((pos - 1L) * 16^(rev(seq_along(xx) - 1)))
}
str_to_int = function(s){
hex_to_int(digest(s,algo='xxhash32'))
}
makePks = function(base){
# unique keys based on hash numbers.
# Duplicate strings are given different keys
# Old method:
n = unlist(tapply(base,base,function(X){1:length(X)}))
as.character(sapply(paste0(base,n),str_to_int))
# For now, just return incrementing values
#1:length(base)
}
getShortCitation = function(b){
if(is.null(b$author)){
return("")
}
citationAndSep = " & "
citationEnd = ""
bAuthors = b$author
if(length(bAuthors)>4){
bAuthors = b$author[1:4]
citationAndSep = ""
citationEnd = " et al."
}
bAuthors = sapply(b$author,function(X){X$family})
if(length(bAuthors)==1){
authorList = bAuthors[1]
} else{
authorList = paste0(
paste(bAuthors[1:(length(bAuthors)-1)],collapse=","),
citationAndSep,
tail(bAuthors,1),
citationEnd
)
}
bCitation = paste0(
authorList,
" (",bYear,")")
return(bCitation)
}
links = data.frame()
bib = data.frame(pk = NA,author = NA,
year = NA,title = NA,record = NA,
citation=NA, stringsAsFactors = F)
for(f in list.dirs(treeBaseFolder)){
files = list.files(f)
if(sum(grepl("*.csv",files)>0)){
linkFile = files[grepl("*.csv",files)][1]
bibFile = files[grepl("*.bib",files)][1]
l = read.csv(paste0(f,"/",linkFile), stringsAsFactors = F)
l = l[complete.cases(l[,c("Var1","Var2")]),]
for(colx in causal_links_columns){
if(!colx %in% names(l)){
l[,colx] = ""
}
}
l = l[,causal_links_columns]
links = rbind(links,l)
#b = readLines(paste0(f,"/",bibFile), warn = F)
b = read.bib(paste0(f,"/",bibFile))
bKey = b$key
bAuthor = paste(b$author,collapse='; ')
bYear = b$year
bTitle = b$title
bRecord = paste(as.character(toBibtex(b)),collapse="\n")
#bCitation = format(b, style = "html")
# remove link text
#bCitation = gsub(">[^<]+</a>",">link</a>",bCitation)
# Citation is now e.g. Ackley & Littman (1994)
bCitation = getShortCitation(b)
bib = rbind(bib,
c(bKey, bAuthor, bYear, bTitle,
bRecord, bCitation))
}
}
bib = bib[2:nrow(bib),]
bib = bib[!is.na(bib$pk),]
bib = bib[bib$pk!="",]
rownames(bib) = bib$pk
bib$citation
library(digest)
library(stringr)
library(dplyr)
library(dbplyr)
library(RSQLite)
library(bibtex)
library(readr)
try(setwd("~/Documents/Bristol/CHIELD/CHIELD_Online/processing/"))
treeBaseFolder = "../data/tree"
causal_links_columns =
c('bibref', 'Var1','Relation','Var2',
'Cor',"Process",
"Topic", "Stage", "Type",
"Subtype","Confirmed","Notes")
# helper functions
hex_to_int = function(h) {
xx = strsplit(tolower(h), "")[[1L]]
pos = match(xx, c(0L:9L, letters[1L:6L]))
sum((pos - 1L) * 16^(rev(seq_along(xx) - 1)))
}
str_to_int = function(s){
hex_to_int(digest(s,algo='xxhash32'))
}
makePks = function(base){
# unique keys based on hash numbers.
# Duplicate strings are given different keys
# Old method:
n = unlist(tapply(base,base,function(X){1:length(X)}))
as.character(sapply(paste0(base,n),str_to_int))
# For now, just return incrementing values
#1:length(base)
}
getShortCitation = function(b){
if(is.null(b$author)){
return("")
}
citationAndSep = " & "
citationEnd = ""
bAuthors = b$author
if(length(bAuthors)>4){
bAuthors = b$author[1:4]
citationAndSep = ""
citationEnd = " et al."
}
bAuthors = sapply(b$author,function(X){X$family})
if(length(bAuthors)==1){
authorList = bAuthors[1]
} else{
authorList = paste0(
paste(bAuthors[1:(length(bAuthors)-1)],collapse=", "),
citationAndSep,
tail(bAuthors,1),
citationEnd
)
}
bCitation = paste0(
authorList,
" (",bYear,")")
return(bCitation)
}
links = data.frame()
bib = data.frame(pk = NA,author = NA,
year = NA,title = NA,record = NA,
citation=NA, stringsAsFactors = F)
for(f in list.dirs(treeBaseFolder)){
files = list.files(f)
if(sum(grepl("*.csv",files)>0)){
linkFile = files[grepl("*.csv",files)][1]
bibFile = files[grepl("*.bib",files)][1]
l = read.csv(paste0(f,"/",linkFile), stringsAsFactors = F)
l = l[complete.cases(l[,c("Var1","Var2")]),]
for(colx in causal_links_columns){
if(!colx %in% names(l)){
l[,colx] = ""
}
}
l = l[,causal_links_columns]
links = rbind(links,l)
#b = readLines(paste0(f,"/",bibFile), warn = F)
b = read.bib(paste0(f,"/",bibFile))
bKey = b$key
bAuthor = paste(b$author,collapse='; ')
bYear = b$year
bTitle = b$title
bRecord = paste(as.character(toBibtex(b)),collapse="\n")
#bCitation = format(b, style = "html")
# remove link text
#bCitation = gsub(">[^<]+</a>",">link</a>",bCitation)
# Citation is now e.g. Ackley & Littman (1994)
bCitation = getShortCitation(b)
bib = rbind(bib,
c(bKey, bAuthor, bYear, bTitle,
bRecord, bCitation))
}
}
bib = bib[2:nrow(bib),]
bib = bib[!is.na(bib$pk),]
bib = bib[bib$pk!="",]
rownames(bib) = bib$pk
bib$citation
library(digest)
library(stringr)
library(dplyr)
library(dbplyr)
library(RSQLite)
library(bibtex)
library(readr)
try(setwd("~/Documents/Bristol/CHIELD/CHIELD_Online/processing/"))
treeBaseFolder = "../data/tree"
causal_links_columns =
c('bibref', 'Var1','Relation','Var2',
'Cor',"Process",
"Topic", "Stage", "Type",
"Subtype","Confirmed","Notes")
# helper functions
hex_to_int = function(h) {
xx = strsplit(tolower(h), "")[[1L]]
pos = match(xx, c(0L:9L, letters[1L:6L]))
sum((pos - 1L) * 16^(rev(seq_along(xx) - 1)))
}
str_to_int = function(s){
hex_to_int(digest(s,algo='xxhash32'))
}
makePks = function(base){
# unique keys based on hash numbers.
# Duplicate strings are given different keys
# Old method:
n = unlist(tapply(base,base,function(X){1:length(X)}))
as.character(sapply(paste0(base,n),str_to_int))
# For now, just return incrementing values
#1:length(base)
}
getShortCitation = function(b){
if(is.null(b$author)){
return("")
}
citationAndSep = " & "
citationEnd = ""
bAuthors = b$author
if(length(bAuthors)>4){
bAuthors = b$author[1:4]
citationAndSep = ", "
citationEnd = " et al."
}
bAuthors = sapply(b$author,function(X){X$family})
if(length(bAuthors)==1){
authorList = bAuthors[1]
} else{
authorList = paste0(
paste(bAuthors[1:(length(bAuthors)-1)],collapse=", "),
citationAndSep,
tail(bAuthors,1),
citationEnd
)
}
bCitation = paste0(
authorList,
" (",bYear,")")
return(bCitation)
}
links = data.frame()
bib = data.frame(pk = NA,author = NA,
year = NA,title = NA,record = NA,
citation=NA, stringsAsFactors = F)
for(f in list.dirs(treeBaseFolder)){
files = list.files(f)
if(sum(grepl("*.csv",files)>0)){
linkFile = files[grepl("*.csv",files)][1]
bibFile = files[grepl("*.bib",files)][1]
l = read.csv(paste0(f,"/",linkFile), stringsAsFactors = F)
l = l[complete.cases(l[,c("Var1","Var2")]),]
for(colx in causal_links_columns){
if(!colx %in% names(l)){
l[,colx] = ""
}
}
l = l[,causal_links_columns]
links = rbind(links,l)
#b = readLines(paste0(f,"/",bibFile), warn = F)
b = read.bib(paste0(f,"/",bibFile))
bKey = b$key
bAuthor = paste(b$author,collapse='; ')
bYear = b$year
bTitle = b$title
bRecord = paste(as.character(toBibtex(b)),collapse="\n")
#bCitation = format(b, style = "html")
# remove link text
#bCitation = gsub(">[^<]+</a>",">link</a>",bCitation)
# Citation is now e.g. Ackley & Littman (1994)
bCitation = getShortCitation(b)
bib = rbind(bib,
c(bKey, bAuthor, bYear, bTitle,
bRecord, bCitation))
}
}
bib = bib[2:nrow(bib),]
bib = bib[!is.na(bib$pk),]
bib = bib[bib$pk!="",]
rownames(bib) = bib$pk
bib$citation
b$author
bAuthor
f = list.dirs(treeBaseFolder)[11]
f
files = list.files(f)
linkFile = files[grepl("*.csv",files)][1]
bibFile = files[grepl("*.bib",files)][1]
l = read.csv(paste0(f,"/",linkFile), stringsAsFactors = F)
l = l[complete.cases(l[,c("Var1","Var2")]),]
for(colx in causal_links_columns){
if(!colx %in% names(l)){
l[,colx] = ""
}
}
l = l[,causal_links_columns]
links = rbind(links,l)
#b = readLines(paste0(f,"/",bibFile), warn = F)
b = read.bib(paste0(f,"/",bibFile))
b
b
print(b$author)
print(b$author, "text")
print(b$author, type='latex')
print(b$author, style='citation')
print(b$author, style='html')
print(b, style='html')
print(b, author,style='html')
print(b, "author",style='html')
print(b, type="author",style='html')
print(b$author,style='html')
print(b$author,style='text')
print(b$author,style='R')
print(b$author, include="family")
print(b$author, include="family")
paste(format(b, include = c("given", "family")), collapse = " and ")
paste(format(b$author, include = c("given", "family")), collapse = " and ")
paste(format(b$author, include = c("family")), collapse = " and ")
bib$citation
files
list.dirs(treeBaseFolder)
library(digest)
library(stringr)
library(dplyr)
library(dbplyr)
library(RSQLite)
library(bibtex)
library(readr)
try(setwd("~/Documents/Bristol/CHIELD/CHIELD_Online/processing/"))
treeBaseFolder = "../data/tree"
causal_links_columns =
c('bibref', 'Var1','Relation','Var2',
'Cor',"Process",
"Topic", "Stage", "Type",
"Subtype","Confirmed","Notes")
# helper functions
hex_to_int = function(h) {
xx = strsplit(tolower(h), "")[[1L]]
pos = match(xx, c(0L:9L, letters[1L:6L]))
sum((pos - 1L) * 16^(rev(seq_along(xx) - 1)))
}
str_to_int = function(s){
hex_to_int(digest(s,algo='xxhash32'))
}
makePks = function(base){
# unique keys based on hash numbers.
# Duplicate strings are given different keys
# Old method:
n = unlist(tapply(base,base,function(X){1:length(X)}))
as.character(sapply(paste0(base,n),str_to_int))
# For now, just return incrementing values
#1:length(base)
}
getShortCitation = function(b){
if(is.null(b$author)){
return("")
}
citationAndSep = " & "
citationEnd = ""
bAuthors = b$author
if(length(bAuthors)>4){
bAuthors = b$author[1:4]
citationAndSep = ", "
citationEnd = " et al."
}
bAuthors = sapply(b$author,function(X){X$family})
if(length(bAuthors)==1){
authorList = bAuthors[1]
} else{
authorList = paste0(
paste(bAuthors[1:(length(bAuthors)-1)],collapse=", "),
citationAndSep,
tail(bAuthors,1),
citationEnd
)
}
bCitation = paste0(
authorList,
" (",bYear,")")
return(bCitation)
}
links = data.frame()
bib = data.frame(pk = NA,author = NA,
year = NA,title = NA,record = NA,
citation=NA, stringsAsFactors = F)
for(f in list.dirs(treeBaseFolder)){
files = list.files(f)
if(sum(grepl("*.csv",files)>0)){
linkFile = files[grepl("*.csv",files)][1]
bibFile = files[grepl("*.bib",files)][1]
l = read.csv(paste0(f,"/",linkFile), stringsAsFactors = F)
l = l[complete.cases(l[,c("Var1","Var2")]),]
for(colx in causal_links_columns){
if(!colx %in% names(l)){
l[,colx] = ""
}
}
l = l[,causal_links_columns]
links = rbind(links,l)
#b = readLines(paste0(f,"/",bibFile), warn = F)
b = read.bib(paste0(f,"/",bibFile))
bKey = b$key
bAuthor = paste(b$author,collapse='; ')
bYear = b$year
bTitle = b$title
bRecord = paste(as.character(toBibtex(b)),collapse="\n")
#bCitation = format(b, style = "html")
# remove link text
#bCitation = gsub(">[^<]+</a>",">link</a>",bCitation)
# Citation is now e.g. Ackley & Littman (1994)
bCitation = getShortCitation(b)
bib = rbind(bib,
c(bKey, bAuthor, bYear, bTitle,
bRecord, bCitation))
}
}
bib = bib[2:nrow(bib),]
bib
bib$citation
list.dirs(treeBaseFolder)[61]
f = list.dirs(treeBaseFolder)[61]
files = list.files(f)
linkFile = files[grepl("*.csv",files)][1]
bibFile = files[grepl("*.bib",files)][1]
l = read.csv(paste0(f,"/",linkFile), stringsAsFactors = F)
l = l[complete.cases(l[,c("Var1","Var2")]),]
for(colx in causal_links_columns){
if(!colx %in% names(l)){
l[,colx] = ""
}
}
l = l[,causal_links_columns]
links = rbind(links,l)
#b = readLines(paste0(f,"/",bibFile), warn = F)
b = read.bib(paste0(f,"/",bibFile))
b
b$key
paste(b$author,collapse='; ')
f = list.dirs(treeBaseFolder)[81]
files = list.files(f)
files
linkFile = files[grepl("*.csv",files)][1]
bibFile = files[grepl("*.bib",files)][1]
b = read.bib(paste0(f,"/",bibFile))
bAuthor = paste(b$author,collapse='; ')
bAuthor
bib$citation
f = list.dirs(treeBaseFolder)[84]
files = list.files(f)
linkFile = files[grepl("*.csv",files)][1]
bibFile = files[grepl("*.bib",files)][1]
b = read.bib(paste0(f,"/",bibFile))
bKey = b$key
paste(b$author,collapse='; ')
b = read.bib(paste0(f,"/",bibFile))
bKey = b$key
bAuthor = paste(b$author,collapse='; ')
bYear = b$year
bTitle = b$title
bRecord = paste(as.character(toBibtex(b)),collapse="\n")
getShortCitation(b)
paste(format(b$author, include = c("given", "family")), collapse = " and ")
paste(format(b$author, include = c("given", "family")), collapse = " and ", style='latex')
paste(format(b$author, include = c("given", "family")), collapse = " and ", style='text')
paste(format(b$author, include = c("given", "family")), collapse = " and ", style='html')
print(format(b$author, include = c("given", "family")), collapse = " and ", style='html')
print(b$author, style='html')
print(b$author, style='text')
names(causal_links)
head(causal_links)
